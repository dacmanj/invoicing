{"ts":1386192676608,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# == Schema Information\n#\n# Table name: invoices\n#\n#  id                 :integer          not null, primary key\n#  contact_id         :integer\n#  account_id         :integer\n#  user_id            :integer\n#  created_at         :datetime         not null\n#  updated_at         :datetime         not null\n#  date               :date\n#  primary_contact_id :integer\n#\n\nclass Invoice < ActiveRecord::Base\ninclude ActionView::Helpers::NumberHelper\n\tbelongs_to :account\n\tbelongs_to :user\n\n  has_many :email_records\n\thas_many :lines\n\thas_many :items, :through => :lines\n  has_many :payments\n\n\thas_and_belongs_to_many :contacts\n\n  accepts_nested_attributes_for :lines, reject_if: proc { |attr| attr['description'].blank? && attr['quantity'].blank? && attr['item_id'].blank? && attr['unit_price'].blank? }, allow_destroy: true\n  accepts_nested_attributes_for :contacts, :reject_if => :all_blank\n\n  attr_accessible :account_id, :contact_ids, :user_id, :lines_attributes, :date, :primary_contact_id\n\n  before_save :set_account_if_blank, :set_primary_contact_if_blank\n\n  def set_primary_contact_if_blank\n      self.primary_contact_id = self.contacts.first.id if !self.contacts.blank? && self.primary_contact_id.blank?\n  end\n\n  def set_account_if_blank\n      self.account_id = self.contacts.first.account_id if self.account_id.blank? and !self.contacts.blank?\n  end\n\n  def total\n  \tt = 0\n  \tself.lines.each do |l|\n  \t\tt += l.total\n \tend\n  \tt\n  end\n\n  def other_past_due_invoices_table\n\n    other_invoices = self.account.invoices.select{|h| h.balance_due != 0 && h.id != self.id}\n    if other_invoices.length == 0\n      return \"\"\n    end\n\n    html = \"<h3>Other Outstanding Invoices</h3>\"\n    html += \"<table><tbody>\"\n    html += \"<thead><tr><th>Invoice Date</th><th>Invoice Number<th>Amount Due</th></tr></thead>\"\n    due = 0\n\n    other_invoices.each do |i|\n      html += \"<tr><td>#{i.date.strftime(\"%m/%d/%Y\")}</td><td>#{number_to_currency(i.balance_due)}</td></tr>\"\n    end\n\n    html += \"</tbody></table>\"\n\n  end\n\n  def template_keys\n    template_keys = [\"account_name\", \"contact_name\", \"contact_first_name\", \"contact_last_name\",\n                      \"invoice_number\", \"invoice_total\", \"balance_due\", \"account_balance_due\", \"other_invoices\"];\n  end\n\n  def parse_template(msg)\n\n    msg % {  :account_name => (self.account.name unless account.blank?) || \"\",\n             :contact_name => (self.contacts.first.name unless self.contacts.first.blank?) || \"\", \n             :contact_first_name => (self.contacts.first.first_name unless self.contacts.first.blank?) || \"\", \n             :contact_last_name => (self.contacts.first.last_name unless self.contacts.first.blank?) || \"\", \n             :invoice_number => self.id,\n             :invoice_total => number_to_currency(self.total),\n             :balance_due => number_to_currency(self.balance_due),\n             :account_balance_due => self.account.balance_due,\n             :other_invoices => self.other_past_due_invoices_table\n\n    }\n\n  end\n\n  def templates_json\n    templates = Hash[EmailTemplate.all.to_a.each_with_object({}){|c,h| h[c.id] = { :name => c.name, :message => parse_template(c.message), :subject => parse_template(c.subject) }}].to_json\n  end\n\n  def payments_total\n    paid = 0\n    self.payments.each{|p| paid += p.amount }\n    paid\n  end\n\n  def balance_due\n    balance_due = self.total - self.payments_total\n  end\n\n  def unpaid?\n    (self.total > self.payments_total)\n  end\n\n  def contact_email\n  \temails = []\n  \tself.contacts.each do |c|\n  \t\temails.push c.address.email unless c.address.blank?\n  \tend\n\n  \temails.join(\",\")\n  end\n\n  def name\n    account_name = (self.account.name unless self.account.blank?) || \"\"\n    \"#{account_name}-#{self.id}-#{self.date}-#{self.total}\"\n  end\n\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":3738}]],"length":3738}
